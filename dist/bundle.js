!function(b){"use strict";const n=Object.create(null),i=(n.open="0",n.close="1",n.ping="2",n.pong="3",n.message="4",n.upgrade="5",n.noop="6",Object.create(null)),I=(Object.keys(n).forEach(t=>{i[n[t]]=t}),{type:"error",data:"parser error"}),F="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),M="function"==typeof ArrayBuffer,z=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer instanceof ArrayBuffer,D=({type:t,data:e},s,i)=>F&&e instanceof Blob?s?i(e):j(e,i):M&&(e instanceof ArrayBuffer||z(e))?s?i(e):j(new Blob([e]),i):i(n[t]+(e||"")),j=(t,e)=>{const s=new FileReader;return s.onload=function(){var t=s.result.split(",")[1];e("b"+(t||""))},s.readAsDataURL(t)};var q="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";const d="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let t=0;t<q.length;t++)d[q.charCodeAt(t)]=t;const X=t=>{let e=.75*t.length,s=t.length,i,n=0,r,o,a,h;"="===t[t.length-1]&&(e--,"="===t[t.length-2])&&e--;var l=new ArrayBuffer(e),c=new Uint8Array(l);for(i=0;i<s;i+=4)r=d[t.charCodeAt(i)],o=d[t.charCodeAt(i+1)],a=d[t.charCodeAt(i+2)],h=d[t.charCodeAt(i+3)],c[n++]=r<<2|o>>4,c[n++]=(15&o)<<4|a>>2,c[n++]=(3&a)<<6|63&h;return l},V="function"==typeof ArrayBuffer,Y=(t,e)=>{var s;return"string"!=typeof t?{type:"message",data:W(t,e)}:"b"===(s=t.charAt(0))?{type:"message",data:H(t.substring(1),e)}:i[s]?1<t.length?{type:i[s],data:t.substring(1)}:{type:i[s]}:I},H=(t,e)=>{var s;return V?(s=X(t),W(s,e)):{base64:!0,data:t}},W=(t,e)=>"blob"===e&&t instanceof ArrayBuffer?new Blob([t]):t,G=String.fromCharCode(30);function r(t){if(t){var e,s=t;for(e in r.prototype)s[e]=r.prototype[e];return s}}r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function s(){this.off(t,s),e.apply(this,arguments)}return s.fn=e,this.on(t,s),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)this._callbacks={};else{var s=this._callbacks["$"+t];if(s)if(1==arguments.length)delete this._callbacks["$"+t];else{for(var i,n=0;n<s.length;n++)if((i=s[n])===e||i.fn===e){s.splice(n,1);break}0===s.length&&delete this._callbacks["$"+t]}}return this},r.prototype.emitReserved=r.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),s=this._callbacks["$"+t],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(s)for(var i=0,n=(s=s.slice(0)).length;i<n;++i)s[i].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length};const s="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function K(s,...t){return t.reduce((t,e)=>(s.hasOwnProperty(e)&&(t[e]=s[e]),t),{})}const J=s.setTimeout,$=s.clearTimeout;function o(t,e){e.useNativeTimers?(t.setTimeoutFn=J.bind(s),t.clearTimeoutFn=$.bind(s)):(t.setTimeoutFn=s.setTimeout.bind(s),t.clearTimeoutFn=s.clearTimeout.bind(s))}const Q=1.33;class Z extends Error{constructor(t,e,s){super(t),this.description=e,this.context=s,this.type="TransportError"}}class tt extends r{constructor(t){super(),this.writable=!1,o(this,t),this.opts=t,this.query=t.query,this.socket=t.socket}onError(t,e,s){return super.emitReserved("error",new Z(t,e,s)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(t){t=Y(t,this.socket.binaryType);this.onPacket(t)}onPacket(t){super.emitReserved("packet",t)}onClose(t){this.readyState="closed",super.emitReserved("close",t)}pause(t){}}const et="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),a=64;let st=0,t=0,it;function nt(t){let e="";for(;e=et[t%a]+e,0<(t=Math.floor(t/a)););return e}function rt(){var t=nt(+new Date);return t!==it?(st=0,it=t):t+"."+nt(st++)}for(;t<a;t++)et[t],t;function ot(t){let e="";for(var s in t)t.hasOwnProperty(s)&&(e.length&&(e+="&"),e+=encodeURIComponent(s)+"="+encodeURIComponent(t[s]));return e}let at=!1;try{at="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){}const ht=at;function lt(t){t=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||ht))return new XMLHttpRequest}catch(t){}if(!t)try{return new s[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP")}catch(t){}}function ct(){}const dt=null!=new lt({xdomain:!1}).responseType;class h extends r{constructor(t,e){super(),o(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){var t=K(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new lt(t);try{e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders)for(var s in e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0),this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(s)&&e.setRequestHeader(s,this.opts.extraHeaders[s])}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():this.setTimeoutFn(()=>{this.onError("number"==typeof e.status?e.status:0)},0))},e.send(this.data)}catch(t){return void this.setTimeoutFn(()=>{this.onError(t)},0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)}onError(t){this.emitReserved("error",t,this.xhr),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=ct,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}}onLoad(){var t=this.xhr.responseText;null!==t&&(this.emitReserved("data",t),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}function ut(){for(var t in h.requests)h.requests.hasOwnProperty(t)&&h.requests[t].abort()}h.requestsCount=0,h.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",ut):"function"==typeof addEventListener&&(e="onpagehide"in s?"pagehide":"unload",addEventListener(e,ut,!1)));const pt="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),l=s.WebSocket||s.MozWebSocket,ft="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();const mt={websocket:class extends tt{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(this.check()){var t=this.uri(),e=this.opts.protocols,s=ft?{}:K(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(s.headers=this.opts.extraHeaders);try{this.ws=ft?new l(t,e,s):e?new l(t,e):new l(t)}catch(t){return this.emitReserved("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=t=>this.onClose({description:"websocket connection closed",context:t}),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){var s=e[t];const i=t===e.length-1;D(s,this.supportsBinary,t=>{try{this.ws.send(t)}catch(t){}i&&pt(()=>{this.writable=!0,this.emitReserved("drain")},this.setTimeoutFn)})}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){var t=this.query||{},e=this.opts.secure?"wss":"ws";let s="";this.opts.port&&("wss"==e&&443!==Number(this.opts.port)||"ws"==e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=rt()),this.supportsBinary||(t.b64=1);t=ot(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(t.length?"?"+t:"")}check(){return!!l}},polling:class extends tt{constructor(e){if(super(e),this.polling=!1,"undefined"!=typeof location){var s="https:"===location.protocol;let t=location.port;t=t||(s?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||t!==e.port,this.xs=e.secure!==s}s=e&&e.forceBase64;this.supportsBinary=dt&&!s}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",function(){--t||e()})),this.writable||(t++,this.once("drain",function(){--t||e()}))}else e()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(t){((t,e)=>{var s=t.split(G),i=[];for(let t=0;t<s.length;t++){var n=Y(s[t],e);if(i.push(n),"error"===n.type)break}return i})(t,this.socket.binaryType).forEach(t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(t)}),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState)&&this.poll()}doClose(){var t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1;{var i=t=>{this.doWrite(t,()=>{this.writable=!0,this.emitReserved("drain")})};const n=t.length,r=new Array(n);let s=0;t.forEach((t,e)=>{D(t,!1,t=>{r[e]=t,++s===n&&i(r.join(G))})})}}uri(){var t=this.query||{},e=this.opts.secure?"https":"http";let s="";!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=rt()),this.supportsBinary||t.sid||(t.b64=1),this.opts.port&&("https"==e&&443!==Number(this.opts.port)||"http"==e&&80!==Number(this.opts.port))&&(s=":"+this.opts.port);t=ot(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+s+this.opts.path+(t.length?"?"+t:"")}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new h(this.uri(),t)}doWrite(t,e){t=this.request({method:"POST",data:t});t.on("success",e),t.on("error",(t,e)=>{this.onError("xhr post error",t,e)})}doPoll(){var t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(t,e)=>{this.onError("xhr poll error",t,e)}),this.pollXhr=t}}},gt=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,wt=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function c(t){var e=t,s=t.indexOf("["),i=t.indexOf("]");-1!=s&&-1!=i&&(t=t.substring(0,s)+t.substring(s,i).replace(/:/g,";")+t.substring(i,t.length));let n=gt.exec(t||""),r={},o=14;for(;o--;)r[wt[o]]=n[o]||"";return-1!=s&&-1!=i&&(r.source=e,r.host=r.host.substring(1,r.host.length-1).replace(/;/g,":"),r.authority=r.authority.replace("[","").replace("]","").replace(/;/g,":"),r.ipv6uri=!0),r.pathNames=function(t){var e=t.replace(/\/{2,9}/g,"/").split("/");"/"!=t.slice(0,1)&&0!==t.length||e.splice(0,1);"/"==t.slice(-1)&&e.splice(e.length-1,1);return e}(r.path),r.queryKey=function(t){const i={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,function(t,e,s){e&&(i[e]=s)}),i}(r.query),r}let yt=class m extends r{constructor(t,e={}){super(),this.writeBuffer=[],t&&"object"==typeof t&&(e=t,t=null),t?(t=c(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=c(e.host).host),o(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(t){var s={},i=t.split("&");for(let t=0,e=i.length;t<e;t++){var n=i[t].split("=");s[decodeURIComponent(n[0])]=decodeURIComponent(n[1])}return s}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname)&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1)),this.open()}createTransport(t){var e=Object.assign({},this.opts.query),e=(e.EIO=4,e.transport=t,this.id&&(e.sid=this.id),Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port}));return new mt[t](e)}open(){let t;if(this.opts.rememberUpgrade&&m.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn(()=>{this.emitReserved("error","No transports available")},0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){this.transport&&this.transport.removeAllListeners(),(this.transport=t).on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",t=>this.onClose("transport close",t))}probe(t){let e=this.createTransport(t),s=!1;m.priorWebsocketSuccess=!1;const i=()=>{s||(e.send([{type:"ping",data:"probe"}]),e.once("packet",t=>{s||("pong"===t.type&&"probe"===t.data?(this.upgrading=!0,this.emitReserved("upgrading",e),e&&(m.priorWebsocketSuccess="websocket"===e.name,this.transport.pause(()=>{s||"closed"!==this.readyState&&(l(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emitReserved("upgrade",e),e=null,this.upgrading=!1,this.flush())}))):((t=new Error("probe error")).transport=e.name,this.emitReserved("upgradeError",t)))}))};function n(){s||(s=!0,l(),e.close(),e=null)}const r=t=>{t=new Error("probe error: "+t);t.transport=e.name,n(),this.emitReserved("upgradeError",t)};function o(){r("transport closed")}function a(){r("socket closed")}function h(t){e&&t.name!==e.name&&n()}const l=()=>{e.removeListener("open",i),e.removeListener("error",r),e.removeListener("close",o),this.off("close",a),this.off("upgrading",h)};e.once("open",i),e.once("error",r),e.once("close",o),this.once("close",a),this.once("upgrading",h),e.open()}onOpen(){if(this.readyState="open",m.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let t=0;for(var e=this.upgrades.length;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":var e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.maxPayload=t.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn(()=>{this.onClose("ping timeout")},this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),(this.prevBufferLen=0)===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){var t;"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(t=this.getWritablePackets(),this.transport.send(t),this.prevBufferLen=t.length,this.emitReserved("flush"))}getWritablePackets(){if(this.maxPayload&&"polling"===this.transport.name&&1<this.writeBuffer.length){let e=1;for(let t=0;t<this.writeBuffer.length;t++){var s=this.writeBuffer[t].data;if(s&&(e+=function(t){if("string"!=typeof t)return Math.ceil((t.byteLength||t.size)*Q);{var n=t;let s=0,i=0;for(let t=0,e=n.length;t<e;t++)(s=n.charCodeAt(t))<128?i+=1:s<2048?i+=2:s<55296||57344<=s?i+=3:(t++,i+=4);return i}}(s)),0<t&&e>this.maxPayload)return this.writeBuffer.slice(0,t);e+=2}}return this.writeBuffer}write(t,e,s){return this.sendPacket("message",t,e,s),this}send(t,e,s){return this.sendPacket("message",t,e,s),this}sendPacket(t,e,s,i){"function"==typeof e&&(i=e,e=void 0),"function"==typeof s&&(i=s,s=null),"closing"!==this.readyState&&"closed"!==this.readyState&&((s=s||{}).compress=!1!==s.compress,this.emitReserved("packetCreate",t={type:t,data:e,options:s}),this.writeBuffer.push(t),i&&this.once("flush",i),this.flush())}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},s=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",()=>{(this.upgrading?s:t)()}):(this.upgrading?s:t)()),this}onError(t){m.priorWebsocketSuccess=!1,this.emitReserved("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){var e=[];let s=0;for(var i=t.length;s<i;s++)~this.transports.indexOf(t[s])&&e.push(t[s]);return e}};yt.protocol=4;const vt="function"==typeof ArrayBuffer,Et=t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer;var e=Object.prototype.toString;const bt="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===e.call(Blob),Rt="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===e.call(File);function u(t){return vt&&(t instanceof ArrayBuffer||Et(t))||bt&&t instanceof Blob||Rt&&t instanceof File}function _t(t){var e=[],s=t.data;return t.data=function e(s,i){if(!s)return s;{if(u(s)){const t={_placeholder:!0,num:i.length};return i.push(s),t}if(Array.isArray(s)){const n=new Array(s.length);for(let t=0;t<s.length;t++)n[t]=e(s[t],i);return n}if("object"==typeof s&&!(s instanceof Date)){const r={};for(const o in s)Object.prototype.hasOwnProperty.call(s,o)&&(r[o]=e(s[o],i));return r}}return s}(s,e),t.attachments=e.length,{packet:t,buffers:e}}function Tt(t,e){return t.data=function e(s,i){if(!s)return s;{if(s&&!0===s._placeholder){const t="number"==typeof s.num&&0<=s.num&&s.num<i.length;if(t)return i[s.num];throw new Error("illegal attachments")}if(Array.isArray(s))for(let t=0;t<s.length;t++)s[t]=e(s[t],i);else if("object"==typeof s)for(const n in s)Object.prototype.hasOwnProperty.call(s,n)&&(s[n]=e(s[n],i))}return s}(t.data,e),delete t.attachments,t}const xt=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"];var p;(e=p=p||{})[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK";function Bt(t){return"[object Object]"===Object.prototype.toString.call(t)}class At extends r{constructor(t){super(),this.reviver=t}add(t){let e;if("string"==typeof t){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");var s=(e=this.decodeString(t)).type===p.BINARY_EVENT;(!s&&e.type!==p.BINARY_ACK||(e.type=s?p.EVENT:p.ACK,this.reconstructor=new kt(e),0===e.attachments))&&super.emitReserved("decoded",e)}else{if(!u(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");(e=this.reconstructor.takeBinaryData(t))&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;var s={type:Number(t.charAt(0))};if(void 0===p[s.type])throw new Error("unknown packet type "+s.type);if(s.type===p.BINARY_EVENT||s.type===p.BINARY_ACK){for(var i=e+1;"-"!==t.charAt(++e)&&e!=t.length;);i=t.substring(i,e);if(i!=Number(i)||"-"!==t.charAt(e))throw new Error("Illegal attachments");s.attachments=Number(i)}if("/"===t.charAt(e+1)){for(i=e+1;++e;){if(","===t.charAt(e))break;if(e===t.length)break}s.nsp=t.substring(i,e)}else s.nsp="/";i=t.charAt(e+1);if(""!==i&&Number(i)==i){for(i=e+1;++e;){var n=t.charAt(e);if(null==n||Number(n)!=n){--e;break}if(e===t.length)break}s.id=Number(t.substring(i,e+1))}if(t.charAt(++e)){i=this.tryParse(t.substr(e));if(!At.isPayloadValid(s.type,i))throw new Error("invalid payload");s.data=i}return s}tryParse(t){try{return JSON.parse(t,this.reviver)}catch(t){return!1}}static isPayloadValid(t,e){switch(t){case p.CONNECT:return Bt(e);case p.DISCONNECT:return void 0===e;case p.CONNECT_ERROR:return"string"==typeof e||Bt(e);case p.EVENT:case p.BINARY_EVENT:return Array.isArray(e)&&("number"==typeof e[0]||"string"==typeof e[0]&&-1===xt.indexOf(e[0]));case p.ACK:case p.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class kt{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){return this.buffers.push(t),this.buffers.length===this.reconPack.attachments?(t=Tt(this.reconPack,this.buffers),this.finishedReconstruction(),t):null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}var Nt=Object.freeze({__proto__:null,Decoder:At,Encoder:class{constructor(t){this.replacer=t}encode(t){return t.type!==p.EVENT&&t.type!==p.ACK||!function s(i){if(i&&"object"==typeof i)if(Array.isArray(i)){for(let t=0,e=i.length;t<e;t++)if(s(i[t]))return!0}else{if(u(i))return!0;if(i.toJSON&&"function"==typeof i.toJSON&&1===arguments.length)return s(i.toJSON(),!0);for(const t in i)if(Object.prototype.hasOwnProperty.call(i,t)&&s(i[t]))return!0}return!1}(t)?[this.encodeAsString(t)]:this.encodeAsBinary({type:t.type===p.EVENT?p.BINARY_EVENT:p.BINARY_ACK,nsp:t.nsp,data:t.data,id:t.id})}encodeAsString(t){let e=""+t.type;return t.type!==p.BINARY_EVENT&&t.type!==p.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data,this.replacer)),e}encodeAsBinary(t){var t=_t(t),e=this.encodeAsString(t.packet),t=t.buffers;return t.unshift(e),t}},get PacketType(){return p},protocol:5});function f(t,e,s){return t.on(e,s),function(){t.off(e,s)}}const St=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class m extends r{constructor(t,e,s){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,s&&s.auth&&(this.auth=s.auth),this._opts=Object.assign({},s),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){var t;this.subs||(t=this.io,this.subs=[f(t,"open",this.onopen.bind(this)),f(t,"packet",this.onpacket.bind(this)),f(t,"error",this.onerror.bind(this)),f(t,"close",this.onclose.bind(this))])}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(St.hasOwnProperty(t))throw new Error('"'+t.toString()+'" is a reserved event name');var s,i;return e.unshift(t),!this._opts.retries||this.flags.fromQueue||this.flags.volatile?(i=((t={type:p.EVENT,data:e,options:{}}).options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(s=this.ids++,i=e.pop(),this._registerAckCallback(s,i),t.id=s),this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable),(!this.flags.volatile||i&&this.connected)&&(this.connected?(this.notifyOutgoingListeners(t),this.packet(t)):this.sendBuffer.push(t)),this.flags={}):this._addToQueue(e),this}_registerAckCallback(e,s){var t=null!=(t=this.flags.timeout)?t:this._opts.ackTimeout;if(void 0===t)this.acks[e]=s;else{const i=this.io.setTimeoutFn(()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&this.sendBuffer.splice(t,1);s.call(this,new Error("operation has timed out"))},t);this.acks[e]=(...t)=>{this.io.clearTimeoutFn(i),s.apply(this,[null,...t])}}}emitWithAck(t,...e){const n=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise((s,i)=>{e.push((t,e)=>n?t?i(t):s(e):s(t)),this.emit(t,...e)})}_addToQueue(t){let s;"function"==typeof t[t.length-1]&&(s=t.pop());const i={id:this._queueSeq++,tryCount:0,pending:!1,args:t,flags:Object.assign({fromQueue:!0},this.flags)};t.push((t,...e)=>{if(i===this._queue[0])return null!==t?i.tryCount>this._opts.retries&&(this._queue.shift(),s)&&s(t):(this._queue.shift(),s&&s(null,...e)),i.pending=!1,this._drainQueue()}),this._queue.push(i),this._drainQueue()}_drainQueue(t=!1){var e;!this.connected||0===this._queue.length||(e=this._queue[0]).pending&&!t||(e.pending=!0,e.tryCount++,this.flags=e.flags,this.emit.apply(this,e.args))}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth(t=>{this._sendConnectPacket(t)}):this._sendConnectPacket(this.auth)}_sendConnectPacket(t){this.packet({type:p.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},t):t})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t,e){this.connected=!1,delete this.id,this.emitReserved("disconnect",t,e)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case p.CONNECT:t.data&&t.data.sid?this.onconnect(t.data.sid,t.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case p.EVENT:case p.BINARY_EVENT:this.onevent(t);break;case p.ACK:case p.BINARY_ACK:this.onack(t);break;case p.DISCONNECT:this.ondisconnect();break;case p.CONNECT_ERROR:this.destroy();var e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){var e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length)for(const e of this._anyListeners.slice())e.apply(this,t);super.emit.apply(this,t),this._pid&&t.length&&"string"==typeof t[t.length-1]&&(this._lastOffset=t[t.length-1])}ack(e){const s=this;let i=!1;return function(...t){i||(i=!0,s.packet({type:p.ACK,id:e,data:t}))}}onack(t){var e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t,e){this.id=t,this.recovered=e&&this._pid===e,this._pid=e,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach(t=>this.emitEvent(t)),this.receiveBuffer=[],this.sendBuffer.forEach(t=>{this.notifyOutgoingListeners(t),this.packet(t)}),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach(t=>t()),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:p.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(e){if(this._anyListeners)if(e){var s=this._anyListeners;for(let t=0;t<s.length;t++)if(e===s[t])return s.splice(t,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(t),this}prependAnyOutgoing(t){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(t),this}offAnyOutgoing(e){if(this._anyOutgoingListeners)if(e){var s=this._anyOutgoingListeners;for(let t=0;t<s.length;t++)if(e===s[t])return s.splice(t,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(t){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length)for(const e of this._anyOutgoingListeners.slice())e.apply(this,t.data)}}function g(t){this.ms=(t=t||{}).min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=0<t.jitter&&t.jitter<=1?t.jitter:0,this.attempts=0}g.prototype.duration=function(){var t,e,s=this.ms*Math.pow(this.factor,this.attempts++);return this.jitter&&(t=Math.random(),e=Math.floor(t*this.jitter*s),s=0==(1&Math.floor(10*t))?s-e:s+e),0|Math.min(s,this.max)},g.prototype.reset=function(){this.attempts=0},g.prototype.setMin=function(t){this.ms=t},g.prototype.setMax=function(t){this.max=t},g.prototype.setJitter=function(t){this.jitter=t};class Lt extends r{constructor(t,e){super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,o(this,e),this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(null!=(s=e.randomizationFactor)?s:.5),this.backoff=new g({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;var s=e.parser||Nt;this.encoder=new s.Encoder,this.decoder=new s.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null!=(e=this.backoff)&&e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null!=(e=this.backoff)&&e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null!=(e=this.backoff)&&e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(!~this._readyState.indexOf("open")){this.engine=new yt(this.uri,this.opts);const i=this.engine,n=this,r=(this._readyState="opening",this.skipReconnect=!1,f(i,"open",function(){n.onopen(),e&&e()}));var t=f(i,"error",t=>{n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()});if(!1!==this._timeout){var s=this._timeout;0===s&&r();const o=this.setTimeoutFn(()=>{r(),i.close(),i.emit("error",new Error("timeout"))},s);this.opts.autoUnref&&o.unref(),this.subs.push(function(){clearTimeout(o)})}this.subs.push(r),this.subs.push(t)}return this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");var t=this.engine;this.subs.push(f(t,"ping",this.onping.bind(this)),f(t,"data",this.ondata.bind(this)),f(t,"error",this.onerror.bind(this)),f(t,"close",this.onclose.bind(this)),f(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){try{this.decoder.add(t)}catch(t){this.onclose("parse error",t)}}ondecoded(t){pt(()=>{this.emitReserved("packet",t)},this.setTimeoutFn)}onerror(t){this.emitReserved("error",t)}socket(t,e){let s=this.nsps[t];return s?this._autoConnect&&!s.active&&s.connect():(s=new m(this,t,e),this.nsps[t]=s),s}_destroy(t){for(const e of Object.keys(this.nsps)){const t=this.nsps[e];if(t.active)return}this._close()}_packet(e){var s=this.encoder.encode(e);for(let t=0;t<s.length;t++)this.engine.write(s[t],e.options)}cleanup(){this.subs.forEach(t=>t()),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t,e){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t,e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{var t=this.backoff.duration();this._reconnecting=!0;const s=this.setTimeoutFn(()=>{e.skipReconnect||(this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect)||e.open(t=>{t?(e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):e.onreconnect()})},t);this.opts.autoUnref&&s.unref(),this.subs.push(function(){clearTimeout(s)})}}onreconnect(){var t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const w={};function y(t,e){"object"==typeof t&&(e=t,t=void 0);var t=function(t,e,s){let i=t;return s=s||"undefined"!=typeof location&&location,"string"==typeof(t=null==t?s.protocol+"//"+s.host:t)&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?s.protocol+t:s.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==s?s.protocol+"//"+t:"https://"+t),i=c(t)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/",t=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host,i.id=i.protocol+"://"+t+":"+i.port+e,i.href=i.protocol+"://"+t+(s&&s.port===i.port?"":":"+i.port),i}(t,(e=e||{}).path||"/socket.io"),s=t.source,i=t.id,n=t.path,n=w[i]&&n in w[i].nsps,n=e.forceNew||e["force new connection"]||!1===e.multiplex||n;let r;return r=n?new Lt(s,e):(w[i]||(w[i]=new Lt(s,e)),w[i]),t.query&&!e.query&&(e.query=t.queryKey),r.socket(t.path,e)}function v(t){return E([[t.a[0][0],t.a[0][1],t.a[0][2],t.a[0][3]],[t.a[1][0],t.a[1][1],t.a[1][2],t.a[1][3]],[t.a[2][0],t.a[2][1],t.a[2][2],t.a[2][3]],[t.a[3][0],t.a[3][1],t.a[3][2],t.a[3][3]]])}Object.assign(y,{Manager:Lt,Socket:m,io:y,connect:y});class Ot{constructor(s){if("object"==typeof s)if("object"==typeof s[0]){this.a=[];for(let e=0;e<4;e++){var i=[];if(void 0!==s[e])for(let t=0;t<4;t++)i[t]=void 0===s[e][t]?0:s[e][t];else for(let t=0;t<4;t++)i[t]=0;this.a[e]=i}}else{this.a=[];for(let e=0;e<4;e++){var n=[];for(let t=0;t<4;t++)n[t]=void 0===s[4*e+t]?0:s[4*e+t];this.a[e]=n}}else{this.a=[];for(let e=0;e<4;e++){var r=[];for(let t=0;t<4;t++)r[t]=void 0===arguments[4*e+t]?0:arguments[4*e+t];this.a[e]=r}}}mulMatr=i=>{var n=E();for(let s=0;s<4;s++)for(let e=0;e<4;e++)for(let t=0;t<4;t++)n.a[s][e]+=this.a[s][t]*i.a[t][e];return n};transpose=()=>{var s=E();for(let e=0;e<4;e++)for(let t=0;t<4;t++)s.a[e][t]=this.a[t][e];return s};determ=()=>this.a[0][0]*_(this.a[1][1],this.a[1][2],this.a[1][3],this.a[2][1],this.a[2][2],this.a[2][3],this.a[3][1],this.a[3][2],this.a[3][3])-this.a[0][1]*_(this.a[1][0],this.a[1][2],this.a[1][3],this.a[2][0],this.a[2][2],this.a[2][3],this.a[3][0],this.a[3][2],this.a[3][3])+this.a[0][2]*_(this.a[1][0],this.a[1][1],this.a[1][3],this.a[2][0],this.a[2][1],this.a[2][3],this.a[3][0],this.a[3][1],this.a[3][3])-this.a[0][3]*_(this.a[1][0],this.a[1][1],this.a[1][2],this.a[2][0],this.a[2][1],this.a[2][2],this.a[3][0],this.a[3][1],this.a[3][2]);inverse=()=>{var t,e=this.determ();return 0===e?R():((t=E()).a[0][0]=_(this.a[1][1],this.a[1][2],this.a[1][3],this.a[2][1],this.a[2][2],this.a[2][3],this.a[3][1],this.a[3][2],this.a[3][3])/e,t.a[1][0]=-_(this.a[1][0],this.a[1][2],this.a[1][3],this.a[2][0],this.a[2][2],this.a[2][3],this.a[3][0],this.a[3][2],this.a[3][3])/e,t.a[2][0]=_(this.a[1][0],this.a[1][1],this.a[1][3],this.a[2][0],this.a[2][1],this.a[2][3],this.a[3][0],this.a[3][1],this.a[3][3])/e,t.a[3][0]=-_(this.a[1][0],this.a[1][1],this.a[1][2],this.a[2][0],this.a[2][1],this.a[2][2],this.a[3][0],this.a[3][1],this.a[3][2])/e,t.a[0][1]=-_(this.a[0][1],this.a[0][2],this.a[0][3],this.a[2][1],this.a[2][2],this.a[2][3],this.a[3][1],this.a[3][2],this.a[3][3])/e,t.a[1][1]=+_(this.a[0][0],this.a[0][2],this.a[0][3],this.a[2][0],this.a[2][2],this.a[2][3],this.a[3][0],this.a[3][2],this.a[3][3])/e,t.a[2][1]=-_(this.a[0][0],this.a[0][1],this.a[0][3],this.a[2][0],this.a[2][1],this.a[2][3],this.a[3][0],this.a[3][1],this.a[3][3])/e,t.a[3][1]=+_(this.a[0][0],this.a[0][1],this.a[0][2],this.a[2][0],this.a[2][1],this.a[2][2],this.a[3][0],this.a[3][1],this.a[3][2])/e,t.a[0][2]=+_(this.a[0][1],this.a[0][2],this.a[0][3],this.a[1][1],this.a[1][2],this.a[1][3],this.a[3][1],this.a[3][2],this.a[3][3])/e,t.a[1][2]=-_(this.a[0][0],this.a[0][2],this.a[0][3],this.a[1][0],this.a[1][2],this.a[1][3],this.a[3][0],this.a[3][2],this.a[3][3])/e,t.a[2][2]=+_(this.a[0][0],this.a[0][1],this.a[0][3],this.a[1][0],this.a[1][1],this.a[1][3],this.a[3][0],this.a[3][1],this.a[3][3])/e,t.a[3][2]=-_(this.a[0][0],this.a[0][1],this.a[0][2],this.a[1][0],this.a[1][1],this.a[1][2],this.a[3][0],this.a[3][1],this.a[3][2])/e,t.a[0][3]=-_(this.a[0][1],this.a[0][2],this.a[0][3],this.a[1][1],this.a[1][2],this.a[1][3],this.a[2][1],this.a[2][2],this.a[2][3])/e,t.a[1][3]=+_(this.a[0][0],this.a[0][2],this.a[0][3],this.a[1][0],this.a[1][2],this.a[1][3],this.a[2][0],this.a[2][2],this.a[2][3])/e,t.a[2][3]=-_(this.a[0][0],this.a[0][1],this.a[0][3],this.a[1][0],this.a[1][1],this.a[1][3],this.a[2][0],this.a[2][1],this.a[2][3])/e,t.a[3][3]=+_(this.a[0][0],this.a[0][1],this.a[0][2],this.a[1][0],this.a[1][1],this.a[1][2],this.a[2][0],this.a[2][1],this.a[2][2])/e,t)}}function E(...t){return new Ot(...t)}function R(){return E([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])}function _(t,e,s,i,n,r,o,a,h){return t*n*h+e*r*o+s*i*a-t*r*a-e*i*h-s*n*o}class Ct{constructor(t,e,s){void 0===t?this.x=this.y=this.z=0:"object"==typeof t?3===t.length?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):void 0===e||void 0===s?this.x=this.y=this.z=t:(this.x=t,this.y=e,this.z=s)}add=t=>T(this.x+t.x,this.y+t.y,this.z+t.z);sub=t=>T(this.x-t.x,this.y-t.y,this.z-t.z);mulNum=t=>T(this.x*t,this.y*t,this.z*t);divNum=t=>T(this.x/t,this.y/t,this.z/t);neg=()=>T(-this.x,-this.y,-this.z);dot=t=>this.x*t.x+this.y*t.y+this.z*t.z;cross=t=>T(this.y*t.z-t.y*this.z,t.x*this.z-this.x*t.z,this.x*t.y-t.x*this.y);len2=()=>this.dot(this,this);len=()=>{var t=this.len2();return 0===t||1===t?t:Math.sqrt(t)};norm=()=>{var t=this.len();return this.divNum(t)};mulMatr=t=>{var e=this.x*t.a[0][3]+this.y*t.a[1][3]+this.z*t.a[2][3]+t.a[3][3];return T((this.x*t.a[0][0]+this.y*t.a[1][0]+this.z*t.a[2][0]+t.a[3][0])/e,(this.x*t.a[0][1]+this.y*t.a[1][1]+this.z*t.a[2][1]+t.a[3][1])/e,(this.x*t.a[0][2]+this.y*t.a[1][2]+this.z*t.a[2][2]+t.a[3][2])/e)};vecTransform=t=>T(this.x*t.a[0][0]+this.y*t.a[1][0]+this.z*t.a[2][0],this.x*t.a[0][1]+this.y*t.a[1][1]+this.z*t.a[2][1],this.x*t.a[0][2]+this.y*t.a[1][2]+this.z*t.a[2][2]);pointTransform=t=>T(this.x*t.a[0][0]+this.y*t.a[1][0]+this.z*t.a[2][0]+t.a[3][0],this.x*t.a[0][1]+this.y*t.a[1][1]+this.z*t.a[2][1]+t.a[3][1],this.x*t.a[0][2]+this.y*t.a[1][2]+this.z*t.a[2][2]+t.a[3][2])}function T(...t){return new Ct(...t)}class Ut{constructor(t,e){this.id=window.gl.createBuffer(),this.type=t,window.gl.bindBuffer(t,this.id),window.gl.bufferData(t,e,window.gl.STATIC_DRAW)}update(t){window.gl.bindBuffer(this.type,this.id),window.gl.bufferSubData(this.type,0,new Float32Array(t),0)}apply(){window.gl.bindBuffer(this.type,this.id)}free(){window.gl.deleteBuffer(this.id),this.id=null,this.size=0}}class Pt extends Ut{constructor(t){super(window.gl.ARRAY_BUFFER,44*t.length),this.numOfVertices=t.length,window.gl.bufferData(window.gl.ARRAY_BUFFER,new Float32Array(t),window.gl.STATIC_DRAW)}update(t){window.gl.bindBuffer(window.gl.ARRAY_BUFFER,this.id),window.gl.bufferSubData(window.gl.ARRAY_BUFFER,0,new Float32Array(t),0)}free(){super.free(),this.numOfVertices=0}}class It extends Ut{constructor(t){super(window.gl.ELEMENT_ARRAY_BUFFER,2*t.length),this.numOfIndices=t.length,window.gl.bufferData(window.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(t),window.gl.STATIC_DRAW)}update(t){window.gl.bindBuffer(window.gl.ELEMENT_ARRAY_BUFFER,this.id),window.gl.bufferSubData(window.gl.ELEMENT_ARRAY_BUFFER,0,new Uint32Array(t),0)}free(){super.free(),this.numOfIndices=0}}class Ft extends Ut{constructor(t,e,s){super(window.gl.UNIFORM_BUFFER,e),window.gl.bufferData(window.gl.UNIFORM_BUFFER,e,window.gl.STATIC_DRAW),this.name=t,this.bind=s}update(t){window.gl.bindBuffer(window.gl.UNIFORM_BUFFER,this.id),window.gl.bufferSubData(window.gl.UNIFORM_BUFFER,0,new Float32Array(t),0)}apply(t){var e=window.gl.getUniformBlockIndex(t,this.name);-1!==e&&4294967295!==e&&(window.gl.uniformBlockBinding(t,e,this.bind),window.gl.bindBufferBase(window.gl.UNIFORM_BUFFER,this.bind,this.id))}free(){super.free()}}class x{constructor(t,e,s,i,n,r,o){this.name=t,this.ka=e,this.kd=s,this.ks=i,this.ph=n,this.trans=r,this.shdNo=o;t=[this.ka.x,this.ka.y,this.ka.z,this.ph,this.kd.x,this.kd.y,this.kd.z,this.trans,this.ks.x,this.ks.y,this.ks.z,0];this.uboBuf=new Ft("MtlUBO",4*t.length,1),this.uboBuf.update(t),this.tex=[-1,-1,-1,-1,-1,-1,-1,-1]}free(){this.uboBuf.free()}}function Mt(t){return this.getDef=()=>new x("Default",T(.1),T(.9),T(.3),30,1,0),this.add=e=>{for(let t=0;t<this.mtlSize;t++)if(e.name===this.mtls[t])return t;return this.mtls[this.mtlSize]=e,this.mtlSize++},this.get=t=>t<0||t>=this.mtlSize?this.mtls[0]:this.mtls[t],this.apply=t=>{var e=this.get(t),s=b.dsRnd.shd.shdGet(e.shdNo).progId;if(void 0===s)return 0;window.gl.useProgram(s),e.uboBuf.apply(s);let i;for(let t=0;t<e.tex.length;t++)-1!==e.tex[t]?(b.dsRnd.tex.textures[e.tex[t]].isCube?(window.gl.activeTexture(window.gl.TEXTURE0+9),window.gl.bindTexture(window.gl.TEXTURE_CUBE_MAP,b.dsRnd.tex.textures[e.tex[t]].id),-1!==(i=window.gl.getUniformLocation(s,"Cubemap"+t))&&window.gl.uniform1i(i,t)):(window.gl.activeTexture(window.gl.TEXTURE0+t),window.gl.bindTexture(window.gl.TEXTURE_2D,b.dsRnd.tex.textures[e.tex[t]].id),-1!==(i=window.gl.getUniformLocation(s,"Texture"+t))&&window.gl.uniform1i(i,t)),-1!==(i=window.gl.getUniformLocation(s,"IsTexture"+t))&&window.gl.uniform1i(i,1)):-1!==(i=window.gl.getUniformLocation(s,"IsTexture"+t))&&window.gl.uniform1i(i,0);return s},this.free=()=>{for(let t=0;t<this.mtlSize;t++)this.mtls[t].free()},this.mtlSize=0,this.mtls=[],this.add(this.getDef()),this}class zt{constructor(t,e){this.x=t,this.y=void 0===e?t:e}}function B(...t){return new zt(...t)}class Dt{constructor(t,e,s,i){this.x=t,this.y=e,this.z=s,this.w=i}}function A(...t){return new Dt(...t)}class jt{constructor(t,e){this.progId=e,this.name=t}}function qt(o){return this.load=s=>{const i=[["vert",o.VERTEX_SHADER],["frag",o.FRAGMENT_SHADER]];var t=[];for(let e=0;e<i.length;e++){const r="../bin/shaders/"+s+"/"+i[e][0]+".glsl";t[e]=fetch(r).then(t=>t.text()).then(t=>{i[e][2]=o.createShader(i[e][1]),o.shaderSource(i[e][2],t),o.compileShader(i[e][2]),o.getShaderParameter(i[e][2],o.COMPILE_STATUS)||(t=o.getShaderInfoLog(i[e][2]),console.log(r+":\n"+t))})}const n=this.shaderSize;this.shaders[n]=new jt(s,void 0),Promise.all(t).then(()=>{var t,e=o.createProgram();for(let t=0;t<i.length;t++)o.attachShader(e,i[t][2]);o.linkProgram(e),o.getProgramParameter(e,o.LINK_STATUS)||(t=o.getProgramInfoLog(e),console.log(t)),this.shaders[n]=new jt(s,e)})},this.add=e=>{for(let t=0;t<this.shaderSize;t++)if(this.shaders[t].name===e)return t;return this.load(e),this.shaderSize++},this.shdGet=t=>t<0||t>=this.shaderSize?this.shaders[0]:this.shaders[t],this.shaderSize=0,this.shaders=[],this.add("default"),this}class Xt{constructor(t,e,s){this.name=t,this.id=e,this.isCube=void 0!==s&&s}}function Vt(){return this.textures=[],this.texSize=0,this.add=t=>{const e=this.texSize++,s=window.gl,i=(this.textures[e]=new Xt(t,s.createTexture()),new Image);return i.src="../bin/textures/"+t,i.onload=()=>{s.bindTexture(s.TEXTURE_2D,this.textures[e].id),s.texImage2D(s.TEXTURE_2D,0,s.RGBA,s.RGBA,s.UNSIGNED_BYTE,i),s.generateMipmap(s.TEXTURE_2D),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_WRAP_S,s.REPEAT),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_WRAP_T,s.REPEAT),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_MIN_FILTER,s.LINEAR_MIPMAP_LINEAR),s.texParameteri(s.TEXTURE_2D,s.TEXTURE_MAG_FILTER,s.LINEAR)},e},this.addImg=(t,e,s,i)=>{var n=this.texSize++,r=window.gl;return this.textures[n]=new Xt(t,r.createTexture()),r.bindTexture(r.TEXTURE_2D,this.textures[n].id),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,s,i,0,r.RGBA,r.UNSIGNED_BYTE,new Uint8Array(e)),r.generateMipmap(r.TEXTURE_2D),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.REPEAT),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.REPEAT),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR_MIPMAP_LINEAR),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MAG_FILTER,r.LINEAR),n},this.addCubeMap=e=>{const s=this.texSize++,i=window.gl;var n=["PosX","NegX","PosY","NegY","PosZ","NegZ"];this.textures[s]=new Xt(e,i.createTexture(),!0),i.bindTexture(i.TEXTURE_CUBE_MAP,this.textures[s].id),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_MIN_FILTER,i.LINEAR_MIPMAP_LINEAR),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_MAG_FILTER,i.LINEAR),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_WRAP_S,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_WRAP_T,i.CLAMP_TO_EDGE),i.texParameteri(i.TEXTURE_CUBE_MAP,i.TEXTURE_WRAP_R,i.CLAMP_TO_EDGE);for(let t=0;t<6;t++){var r=e+"/"+n[t]+".png";const o=new Image;o.src="../bin/textures/skyboxes/"+r,o.onload=()=>{i.bindTexture(i.TEXTURE_CUBE_MAP,this.textures[s].id),i.texSubImage2D(i.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,i.RGBA,i.UNSIGNED_BYTE,o)}}return s},this}let k=[0,0,0,0],N=[0,0,0];function Yt(e,s){for(let t=0;t<e.length;t++)e[t].n=T(0);if(null!==s)for(let t=0;t+2<s.length;t+=3){var i=e[s[t+1]].p.sub(e[s[t]].p).cross(e[s[t+2]].p.sub(e[s[t]].p)).norm();e[s[t]].n=e[s[t]].n.add(i).norm(),e[s[t+1]].n=e[s[t+1]].n.add(i).norm(),e[s[t+2]].n=e[s[t+2]].n.add(i).norm()}else for(let t=0;t+2<e.length;t+=3){var n=e[t+1].p.sub(e[t].p).cross(e[t+2].p.sub(e[t].p)).norm();e[t].n=e[t].n.add(n).norm(),e[t+1].n=e[t+1].n.add(n).norm(),e[t+2].n=e[t+2].n.add(n).norm()}}class Ht{constructor(t,e,s,i){void 0===t?(this.p=T(0),this.t=B(0),this.n=T(0),this.c=A(0)):"object"==typeof t&&void 0===e?(this.p=t.p,this.t=t.t,this.n=t.n,this.c=t.c):(this.p=t,this.t=e,this.n=s,this.c=i)}}function S(...t){return new Ht(...t)}function L(e,s){for(let t=0;t<16;t++)e.push(s.a[(t-t%4)/4][t%4])}class O{constructor(t,e,s){var i,n;this.vBuf=this.vA=this.iBuf=0,null!==e&&(i=window.gl.createVertexArray(),window.gl.bindVertexArray(i),n=function(e){if("object"!=typeof e[0])return e;var s=[];for(let t=0;t<e.length;t++)s.push(e[t].p.x),s.push(e[t].p.y),s.push(e[t].p.z),s.push(e[t].t.x),s.push(e[t].t.y),s.push(e[t].n.x),s.push(e[t].n.y),s.push(e[t].n.z),s.push(e[t].c.x),s.push(e[t].c.y),s.push(e[t].c.z),s.push(e[t].c.w);return s}(e),this.vBuf=new Pt(n),this.vA=i),null!==s?(n=window.gl.createBuffer(),window.gl.bindBuffer(window.gl.ELEMENT_ARRAY_BUFFER,n),window.gl.bufferData(window.gl.ELEMENT_ARRAY_BUFFER,2*s.length,window.gl.STATIC_DRAW),window.gl.bufferData(window.gl.ELEMENT_ARRAY_BUFFER,new Uint32Array(s),window.gl.STATIC_DRAW),this.iBuf=new It(s),this.numOfElements=s.length):this.numOfElements=e.length,this.trans=R(),this.type=t,this.mtlNo=0,[this.minBB,this.maxBB]=function(e){let s,i;if("object"==typeof e[0]){s=T(e[0].p),i=T(e[0].p);for(let t=1;t<e.length;t++)e[t].p.x<s.x?s.x=e[t].p.x:e[t].p.x>i.x&&(i.x=e[t].p.x),e[t].p.y<s.y?s.y=e[t].p.y:e[t].p.y>i.y&&(i.y=e[t].p.y),e[t].p.z<s.z?s.z=e[t].p.z:e[t].p.z>i.z&&(i.z=e[t].p.z)}else{s=T(e[0],e[1],e[2]),i=T(e[0],e[1],e[2]);for(let t=12;t+2<e.length;t+=12)e[t]<s.x?s.x=e[t]:e[t]>i.x&&(i.x=e[t]),e[t+1]<s.y?s.y=e[t+1]:e[t+1]>i.y&&(i.y=e[t+1]),e[t+2]<s.z?s.z=e[t+2]:e[t+2]>i.z&&(i.z=e[t+2])}return[s,i]}(e)}free=()=>{this.vBuf.free(),this.iBuf.free()};draw=(t,e)=>{var s,t=this.trans.mulMatr(t),i=t.inverse().transpose(),n=t.mulMatr(e),r=b.dsRnd.mtl.apply(this.mtlNo);0!==r&&(L(s=[],t),L(s,i),L(s,n),L(s,e),b.dsRnd.matrixUBO.update(s),b.dsRnd.matrixUBO.apply(r),b.camUBO.apply(r),-1!==(t=window.gl.getUniformLocation(r,"Time"))&&window.gl.uniform1f(t,b.timeFromServer),-1!==(t=window.gl.getUniformLocation(r,"AddonI0"))&&window.gl.uniform1i(t,k[0]),-1!==(t=window.gl.getUniformLocation(r,"AddonI1"))&&window.gl.uniform1i(t,k[1]),-1!==(t=window.gl.getUniformLocation(r,"AddonI2"))&&window.gl.uniform1i(t,k[2]),-1!==(t=window.gl.getUniformLocation(r,"AddonI3"))&&window.gl.uniform1i(t,k[3]),-1!==(t=window.gl.getUniformLocation(r,"AddonF0"))&&window.gl.uniform1f(t,N[0]),-1!==(t=window.gl.getUniformLocation(r,"AddonF1"))&&window.gl.uniform1f(t,N[1]),-1!==(t=window.gl.getUniformLocation(r,"AddonF2"))&&window.gl.uniform1f(t,N[2]),window.gl.bindVertexArray(this.vA),this.vBuf.apply(),0===this.iBuf?window.gl.drawArrays(this.type,0,this.numOfElements):(this.iBuf.apply(),window.gl.drawElements(this.type,this.numOfElements,window.gl.UNSIGNED_INT,0)),-1!==(t=window.gl.getAttribLocation(r,"InPos"))&&(window.gl.vertexAttribPointer(t,3,window.gl.FLOAT,!1,48,0),window.gl.enableVertexAttribArray(t)),-1!==(t=window.gl.getAttribLocation(r,"InTexCoord"))&&(window.gl.vertexAttribPointer(t,2,window.gl.FLOAT,!1,48,12),window.gl.enableVertexAttribArray(t)),-1!==(t=window.gl.getAttribLocation(r,"InNormal"))&&(window.gl.vertexAttribPointer(t,3,window.gl.FLOAT,!1,48,20),window.gl.enableVertexAttribArray(t)),-1!==(t=window.gl.getAttribLocation(r,"InColor")))&&(window.gl.vertexAttribPointer(t,4,window.gl.FLOAT,!1,48,32),window.gl.enableVertexAttribArray(t))}}function Wt(){return this.can=document.getElementById("dsCan"),this.gl=this.can.getContext("webgl2"),Object.defineProperty(window,"gl",{get:()=>(null!=this._gl&&null!=this._gl||(this.canvas=document.getElementById("dsCan"),this._gl=this.canvas.getContext("webgl2")),this._gl),set:t=>{this._gl=t}}),this.shd=new qt(this.gl),this.mtl=new Mt(this.gl),this.tex=new Vt,this.matrixUBO=new Ft("MatrixUBO",256,0),this.gl.clearColor(.28,.47,.8,1),this.gl.enable(this.gl.DEPTH_TEST),this.start=()=>{this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.gl.clear(this.gl.DEPTH_BUFFER_BIT),this.gl.enable(this.gl.DEPTH_TEST)},this.close=()=>{this.mtl.free()},this.primLoad=e=>new Promise((o,t)=>{let a=[],h=[],l,c;fetch(e).then(t=>t.text()).then(t=>{var e=t.split("\n");for(let t=0;t<e.length;t++)"v"===e[t].split(" ")[0]&&l++;for(let t=0;t<e.length;t++){var n=e[t].split(" ");if("v"===n[0]){var s=parseFloat(n[1]),i=parseFloat(n[2]),r=parseFloat(n[3]);a.push(S(T(s,i,r),B(0),T(0),T(0)))}else if("f"==n[0]){let e=0,s=0,i=0;for(let t=1;t<n.length;t++)(c=parseInt(n[t]))<0?c+=l:c--,0===e?s=c:i=(1===e||(h.push(s),h.push(i),h.push(c)),c),e++}}Yt(a,h),o(new O(gl.TRIANGLES,a,h))})}),this}class Gt{constructor(t){this.numOfPrims=t,this.trans=R(),this.minBB=this.maxBB=T(0),this.prims=[]}draw=(t,e)=>{var s=this.trans.mulMatr(t);k[0]=this.numOfPrims;for(let t=0;t<this.numOfPrims;t++)1===b.dsRnd.mtl.get(this.prims[t].mtlNo).trans&&(k[1]=t,this.prims[t].draw(s,e));window.gl.enable(window.gl.CULL_FACE),window.gl.cullFace(window.gl.FRONT);for(let t=0;t<this.numOfPrims;t++)1!==b.dsRnd.mtl.get(this.prims[t].mtlNo).trans&&(k[1]=t,this.prims[t].draw(s,e));window.gl.cullFace(window.gl.BACK);for(let t=0;t<this.numOfPrims;t++)1!==b.dsRnd.mtl.get(this.prims[t].mtlNo).trans&&(k[1]=t,this.prims[t].draw(s,e));window.gl.disable(window.gl.CULL_FACE)}}async function Kt(t){var e=await(await fetch(t)).arrayBuffer(),s=new Uint8Array(e);let i=0;if("G3DM"!==s.slice(i,i+=4).reduce((t,e)=>t+String.fromCharCode(e),""))return null;var[n,r,o]=new Uint32Array(e.slice(i,i+=12)),a=new Gt(n);for(let t=0;t<n;t++){var[h,l,c]=new Uint32Array(e.slice(i,i+=12)),h=new Float32Array(e.slice(i,i+=48*h)),l=new Uint32Array(e.slice(i,i+=4*l));a.prims.push(new O(window.gl.TRIANGLES,h,l)),a.prims[t].mtlNo=b.dsRnd.mtl.mtlSize+c,0===t?(a.minBB=a.prims[0].minBB,a.maxBB=a.prims[0].maxBB):(a.minBB.x>a.prims[t].minBB.x&&(a.minBB.x=a.prims[t].minBB.x),a.maxBB.x<a.prims[t].maxBB.x&&(a.maxBB.x=a.prims[t].maxBB.x),a.minBB.y>a.prims[t].minBB.y&&(a.minBB.y=a.prims[t].minBB.y),a.maxBB.y<a.prims[t].maxBB.y&&(a.maxBB.y=a.prims[t].maxBB.y),a.minBB.z>a.prims[t].minBB.z&&(a.minBB.z=a.prims[t].minBB.z),a.maxBB.z<a.prims[t].maxBB.z&&(a.maxBB.z=a.prims[t].maxBB.z))}for(let t=0;t<r;t++){var d=s.slice(i,i+=300).reduce((t,e)=>t+(0==e?"":String.fromCharCode(e)),""),u=new Float32Array(e.slice(i,i+=44)),p=new Int32Array(e.slice(i,i+=32)),f=new x(d,T(u[0],u[1],u[2]),T(u[3],u[4],u[5]),T(u[6],u[7],u[8]),u[9],u[10],0);for(let t=0;t<8;t++)f.tex[t]=-1==p[t]?-1:p[t]+b.dsRnd.tex.texSize;b.dsRnd.mtl.add(f),i+=304}for(let t=0;t<o;t++){var m=s.slice(i,i+=300).reduce((t,e)=>t+(0==e?"":String.fromCharCode(e)),""),[g,w,y]=new Uint32Array(e.slice(i,i+=12)),v=s.slice(i,i+=g*w*y);for(let t=0;t<v.length;t+=4){var E=v[t];v[t]=v[t+2],v[t+2]=E}b.dsRnd.tex.addImg(m,v,g,w)}return a}function Jt(t){var e=function(e,s){var i=[];if(null!==s)for(let t=0;t<s.length;t++)i[t]=S(e[s[t]],B(0),T(0),A(0));else for(let t=0;t<e.length;t++)i[t]=S(e[t],B(0),T(0),A(0));return i}([T(0,0,0),T(0,0,1),T(1,0,1),T(1,0,0),T(0,1,0),T(0,1,1),T(1,1,1),T(1,1,0)],[0,1,4,1,4,5,1,2,5,2,5,6,2,3,6,3,6,7,3,0,7,0,7,4,4,5,6,4,6,7]);for(let t=0;t+2<e.length;t+=3)t%2==0?(e[t].t=B(0,0),e[t+1].t=B(1,0),e[t+2].t=B(0,1)):(e[t].t=B(1,0),e[t+1].t=B(0,1),e[t+2].t=B(1,1));Yt(e,null);var s=new O(window.gl.TRIANGLES,e,null);return s.trans=t,s}let C=null,$t=null,Qt=null,U=null,Zt=null,te=null,ee=null;function se(s){b.camUBO.update(s.camBuf),b.dsRnd.start(),b.timeFromServer=s.time;var i=v(s.vp);if(window.gl.depthMask(!1),$t.draw(R(),i),window.gl.depthMask(!0),Qt.draw(R(),i),null!==C)for(let e=0;e<s.clients.length;e++){C.trans=v(s.clients[e].trans);for(let t=0;t<=3;t++)C.prims[t].trans=v(s.clients[e].matrtower);for(let t=5;t<=6;t++)C.prims[t].trans=v(s.clients[e].matrtower);C.prims[14].trans=v(s.clients[e].matrtower),C.prims[15].trans=v(s.clients[e].matrgun).mulMatr(v(s.clients[e].matrtower)),C.prims[16].trans=v(s.clients[e].matrdisk),N[0]=s.clients[e].f0*(Math.PI/180),N[1]=Math.cos(N[0]),N[2]=Math.sin(N[0]),k[2]=s.clients[e].i2,k[3]=s.clients[e].i3,C.draw(R(),i),s.numOfClient!==e&&(N[0]=s.clients[e].hp,N[1]=s.clients[e].maxHp,te.draw(s.clients[e].matrPos,i))}if(null!==U)for(let t=0;t<s.shells.length;t++)U.draw(s.shells[t].matr,i);null!==C&&(N[0]=1-Math.max(s.reloading,0)/s.reloadTime,N[1]=s.hp/s.maxHp,Zt.draw(R(),i));for(let t=0;t<s.walls.length;t++){var e=s.walls[t].maxBB.x-s.walls[t].minBB.x,n=s.walls[t].maxBB.y-s.walls[t].minBB.y,r=s.walls[t].maxBB.z-s.walls[t].minBB.z;ee.draw(E([[(e=T(e*s.wallsSc,n,r*s.wallsSc)).x,0,0,0],[0,e.y,0,0],[0,0,e.z,0],[0,0,0,1]]).mulMatr((n=s.walls[t].minBB,E([[1,0,0,0],[0,1,0,0],[0,0,1,0],[(r=new T(n.x,n.y,n.z).mulNum(s.wallsSc)).x,r.y,r.z,1]]))),i)}var t=document.getElementById("dsCan2D"),o=t.getContext("2d");o.clearRect(0,0,t.width,t.height),s.hp<=0&&(o.fillStyle="black",o.globalAlpha=.5,o.fillRect(0,0,t.width,t.height),o.globalAlpha=1,o.fillStyle="white",o.font="30px sans-serif",o.fillText("Tank is destroyed",t.width/2-120,t.height/2),o.fillText("Press 'R' to restart",t.width/2-120,t.height/2+30))}function ie(t){var e=document.getElementById("windowW"),s=document.getElementById("windowWText"),s=(window.gl.canvas.width=parseInt(e.value),s.innerHTML="FrameW:"+e.value,document.getElementById("windowH")),i=document.getElementById("windowHText"),i=(window.gl.canvas.height=parseInt(s.value),i.innerHTML="FrameH:"+s.value,document.getElementById("dsCan2D"));i.width=window.gl.canvas.width,i.height=window.gl.canvas.height,t.emit("Resize",window.gl.canvas.width,window.gl.canvas.height),window.gl.viewport(0,0,window.gl.canvas.width,window.gl.canvas.height),sessionStorage.setItem("screen",JSON.stringify({w:e.value,h:s.value}))}b.dsRnd=void 0,b.camUBO=void 0;const P=[b.timeFromServer=0,0,0,0,0];async function ne(){const s=y();s.on("connect",()=>{{b.dsRnd=new Wt,b.camUBO=new Ft("CamUBO",80,2),Kt("../bin/models/bomb.g3dm").then(t=>{var e=new x("Shell material",T(.24725,.1995,.0745),T(.75164,.60648,.22648),T(.628281,.555802,.366065),51.2,1,0);U=t;for(let t=0;t<U.numOfPrims;t++)U.prims[t].mtlNo=b.dsRnd.mtl.add(e)}),Kt("../bin/models/Sherman.g3dm").then(t=>{C=t;var e=b.dsRnd.shd.add("tank");for(let t=0;t<C.numOfPrims;t++)b.dsRnd.mtl.get(C.prims[t].mtlNo).shdNo=e});var e=[S(T(-1,1,0),B(0),T(0),A(0)),S(T(-1,-1,0),B(0),T(0),A(0)),S(T(1,1,0),B(0),T(0),A(0)),S(T(1,-1,0),B(0),T(0),A(0))];$t=new O(window.gl.TRIANGLE_STRIP,e,null);let t=new x("Sky material",b.dsRnd.mtl.mtls[0].ka,b.dsRnd.mtl.mtls[0].kd,b.dsRnd.mtl.mtls[0].ks,b.dsRnd.mtl.mtls[0].ph,1,0);t.tex[0]=b.dsRnd.tex.add("starSkytex.png"),t.shdNo=b.dsRnd.shd.add("sky"),$t.mtlNo=b.dsRnd.mtl.add(t),e=[S(T(-200,0,-200),B(-1,-1),T(0,1,0),A(0)),S(T(-200,0,200),B(-1,1),T(0,1,0),A(0)),S(T(200,0,-200),B(1,-1),T(0,1,0),A(0)),S(T(200,0,200),B(1,1),T(0,1,0),A(0))],Qt=new O(window.gl.TRIANGLE_STRIP,e,null),(t=new x("Ground material",b.dsRnd.mtl.mtls[0].ka,b.dsRnd.mtl.mtls[0].kd,T(.07,.05,.01),b.dsRnd.mtl.mtls[0].ph,1,0)).tex[0]=b.dsRnd.tex.add("dirtTex.jpg"),t.shdNo=b.dsRnd.shd.add("ground"),Qt.mtlNo=b.dsRnd.mtl.add(t),ee=Jt(R()),(t=new x("Wall material",b.dsRnd.mtl.mtls[0].ka,b.dsRnd.mtl.mtls[0].kd,b.dsRnd.mtl.mtls[0].ks,b.dsRnd.mtl.mtls[0].ph,1,0)).shdNo=b.dsRnd.shd.add("wall"),ee.mtlNo=b.dsRnd.mtl.add(t),e=[S(T(-1,1,0),B(0),T(0),A(0)),S(T(-1,-1,0),B(0),T(0),A(0)),S(T(1,1,0),B(0),T(0),A(0)),S(T(1,-1,0),B(0),T(0),A(0))],Zt=new O(window.gl.TRIANGLE_STRIP,e,null),(t=new x("Reload tank material",b.dsRnd.mtl.mtls[0].ka,b.dsRnd.mtl.mtls[0].kd,b.dsRnd.mtl.mtls[0].ks,b.dsRnd.mtl.mtls[0].ph,1,0)).shdNo=b.dsRnd.shd.add("tankReload"),Zt.mtlNo=b.dsRnd.mtl.add(t),e=[S(T(-1.5,0,0),B(0),T(0),A(0)),S(T(1.5,0,0),B(0),T(0),A(0)),S(T(-1.5,.25,0),B(0),T(0),A(0)),S(T(1.5,.25,0),B(0),T(0),A(0))],te=new O(window.gl.TRIANGLE_STRIP,e,null),(t=new x("Hitpoints tank material",b.dsRnd.mtl.mtls[0].ka,b.dsRnd.mtl.mtls[0].kd,b.dsRnd.mtl.mtls[0].ks,b.dsRnd.mtl.mtls[0].ph,1,0)).shdNo=b.dsRnd.shd.add("tankHP"),te.mtlNo=b.dsRnd.mtl.add(t)}console.log(s.id),ie(s),document.getElementById("windowW").addEventListener("input",()=>{ie(s)}),document.getElementById("windowH").addEventListener("input",()=>{ie(s)}),document.getElementById("hide").addEventListener("click",async()=>{await document.getElementById("dsCan").requestPointerLock({unadjustedMovement:!0})});window.addEventListener("mousemove",t=>{s.emit("MouseMove",t.movementX,t.movementY)}),window.addEventListener("mousedown",t=>{0===t.button?s.emit("MouseButton",!0,!0):2===t.button&&s.emit("MouseButton",!1,!0)}),window.addEventListener("mouseup",t=>{0===t.button?s.emit("MouseButton",!0,!1):2===t.button&&s.emit("MouseButton",!1,!1)}),window.addEventListener("mousewheel",t=>{s.emit("MouseWheel",t.deltaY)}),window.addEventListener("keydown",t=>{0<=b.timeFromServer-P[3]&&(s.emit("Keys",t.keyCode,1),P[3]=b.timeFromServer)}),window.addEventListener("keyup",t=>{0<=b.timeFromServer-P[4]&&(s.emit("Keys",t.keyCode,0),P[4]=b.timeFromServer)}),s.on("ClientRender",t=>{se(t)})}),s.on("disconnect",()=>{console.log(s.id)})}window.addEventListener("load",t=>{ne()})}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
